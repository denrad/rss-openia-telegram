from openai import OpenAI
import feedparser
import requests
import os
from dotenv import load_dotenv

RSS = [
    "https://gcheb.cap.ru/rss/news/news",
    "http://xn--80adtqegosnyo.xn--p1ai/feed",
    "https://tr.ru/taxonomy/term/59/all/feed",
]
NEWS_FILE = "processed_news"

load_dotenv()
bot_token = os.environ.get("TELEGRAM_TOKEN")
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")
client = OpenAI()


def read_processed_news(file_path: str) -> set:
    """
    –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–æ.

    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏.
    :return: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            return set(file.read().split("\n"))
    return set()


def write_processed_news(file_path: str, processed_news: set):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª.

    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏.
    :param processed_news: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    with open(file_path, 'w') as file:
        file.write("\n".join(processed_news))


def get_rss_feed_titles(url: str) -> dict[str, str]:
    """
    –ü–∞—Ä—Å–∏—Ç RSS-–ª–µ–Ω—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.

    :param url: URL RSS-–ª–µ–Ω—Ç—ã
    :return: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - URL –Ω–æ–≤–æ—Å—Ç–∏, –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏.
    """
    xml = requests.get(url).text
    feed = feedparser.parse(xml)
    return {entry.link: entry.title.strip() for entry in feed.entries}


def is_transport_news(news: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –∏ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.

    :param news: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.
    :return: True, –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É, –∏–Ω–∞—á–µ False.
    """
    completion = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": "–°–∫–∞–∂–∏, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –∏ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –≤ –ß–µ–±–æ–∫—Å–∞—Ä–∞—Ö –∏ –ß—É–≤–∞—à–∏–∏. –û—Ç–≤–µ—á–∞–π –¥–∞ –∏–ª–∏ –Ω–µ—Ç. \n" + news,
            }
        ],
        model="gpt-3.5-turbo",
    )
    answer = str(completion.choices[0].message.content)
    return answer.lower().startswith("–¥–∞")


def send_telegram_message(chat_id: str, message_text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.

    :param bot_token: –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
    :param chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    :param message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    send_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    params = {
        "chat_id": chat_id,
        "text": message_text,
    }
    response = requests.post(send_url, data=params)
    return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON


def main():
    processed_news = read_processed_news(NEWS_FILE)

    news = {}
    for url in RSS:
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ {url}...")
        titles = get_rss_feed_titles(url)
        print(f"–ù–æ–≤–æ—Å—Ç–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(titles)}")
        for title_url, title in titles.items():
            if title_url in processed_news:
                print(f"–ù–æ–≤–æ—Å—Ç—å '{title}' —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
                continue
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å '{title}'...")
            if is_transport_news(title):
                print(f"–ù–æ–≤–æ—Å—Ç—å '{title}' –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É.")
                news[title_url] = title
                send_telegram_message(CHAT_ID, f"üì∞ {title}\nüîó {title_url}")
            processed_news.add(title_url)

    write_processed_news(NEWS_FILE, processed_news)


if __name__ == "__main__":
    main()
